
garota.elf:     file format elf32-msp430

SYMBOL TABLE:
0000e000 l    d  .text	00000000 .text
0000a000 l    d  .srom	00000000 .srom
00000200 l    d  .sstack	00000000 .sstack
00001200 l    d  .bss	00000000 .bss
00001208 l    d  .noinit	00000000 .noinit
0000fae0 l    d  .tcb	00000000 .tcb
0000ffe0 l    d  .vectors	00000000 .vectors
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 main.c
0000e04c l       .text	00000000 __br_unexpected_
00010000 g       *ABS*	00000000 _far_end
00000000 g       *ABS*	00000000 __data_size
0000e04c  w      .text	00000000 __isr_14
0000e04c  w      .text	00000000 __isr_4
00000138 g       *ABS*	00000000 __OP2
00010000 g       *ABS*	00000000 _efartext
00000130 g       *ABS*	00000000 __MPY
0000013a g       *ABS*	00000000 __RESLO
00000136 g       *ABS*	00000000 __MACS
0000dffe g       *ABS*	00000000 _etext
00000008 g       *ABS*	00000000 __bss_size
0000e000  w      .text	00000000 __watchdog_support
0000e046  w      .text	00000000 __stop_progExec__
0000e04c  w      .text	00000000 __isr_11
0000e168 g       .text	00000000 __udivmoddi4
0000e050 g     F .text	00000066 main_loop
0000e04c  w      .text	00000000 __isr_5
0000e13a g     F .text	00000000 __umoddi3
0000e1a8 g       *ABS*	00000000 __data_load_start
0000e04c g       .text	00000000 __dtors_end
00001208 g       .bss	00000000 __bss_end
0000e114 g     F .text	00000000 __udivdi3
0000e04c  w      .text	00000000 __isr_2
0000e04c  w      .text	00000000 __isr_10
0000013c g       *ABS*	00000000 __RESHI
00001208 g     O .noinit	00000002 __wdt_clear_value
0000e04c  w      .text	00000000 __isr_7
0000ffe0 g     O .vectors	00000020 __ivtbl_16
0000fae0 g     F .tcb	00000066 TCB
0000fba2 g       .tcb	00000000 __cur_offset
0000e04c  w      .text	00000000 __isr_0
0000e028  w      .text	00000000 __do_clear_bss
0000e1a6  w      .text	00000000 _unexpected_
0000e04c  w      .text	00000000 __isr_8
0000feda g       .tcb	00000000 __exec_leave
0000e04c  w      .text	00000000 __isr_3
0000ffe0 g       .vectors	00000000 __vectors_start
0000e000  w      .text	00000000 _reset_vector__
0000e04c g       .text	00000000 __ctors_start
0000e0b6 g       .text	00000000 __xabi_udivmod64
0000fae0 g       .tcb	00000000 __isr_12
0000e010  w      .text	00000000 __do_copy_data
00001200 g       .bss	00000000 __bss_start
0000e03e g     F .text	00000008 main
0000e04c  w      .text	00000000 __isr_13
00010000 g       .vectors	00000000 _vectors_end
00001200 g     O .bss	00000008 count
0000feda g     F .tcb	00000002 TCB_exit
00001208 g       .noinit	00000000 __noinit_start
0000e04c  w      .text	00000000 __isr_9
0000120a g       .noinit	00000000 __noinit_end
0000e00c  w      .text	00000000 __init_stack
0000fb70 g     F .tcb	00000032 setup
0000e04c g       .text	00000000 __dtors_start
0000e04c  w      .text	00000000 __isr_6
0000e04c g       .text	00000000 __ctors_end
00000132 g       *ABS*	00000000 __MPYS
00006200 g       *ABS*	00000000 __stack
0000e04c  w      .text	00000000 __isr_1
00000200 g       .sstack	00000000 _edata
0000120a g       *ABS*	00000000 _end
00000134 g       *ABS*	00000000 __MAC
0000e046  w      .text	00000000 _endless_loop__
0000e010  w      .text	00000000 __low_level_init
00000200 g       .sstack	00000000 __data_start
0000fb46 g     F .tcb	0000002a tcb_behavior
00000120 g       *ABS*	00000000 __WDTCTL
0000013e g       *ABS*	00000000 __SUMEXT



Disassembly of section .text:

0000e000 <__watchdog_support>:
    e000:	55 42 20 01 	mov.b	&0x0120,r5	
    e004:	35 d0 08 5a 	bis	#23048,	r5	;#0x5a08
    e008:	82 45 08 12 	mov	r5,	&0x1208	

0000e00c <__init_stack>:
    e00c:	31 40 00 62 	mov	#25088,	r1	;#0x6200

0000e010 <__do_copy_data>:
    e010:	3f 40 00 00 	mov	#0,	r15	;#0x0000
    e014:	0f 93       	tst	r15		
    e016:	08 24       	jz	$+18     	;abs 0xe028
    e018:	92 42 08 12 	mov	&0x1208,&0x0120	
    e01c:	20 01 
    e01e:	2f 83       	decd	r15		
    e020:	9f 4f a8 e1 	mov	-7768(r15),512(r15);0xe1a8(r15), 0x0200(r15)
    e024:	00 02 
    e026:	f8 23       	jnz	$-14     	;abs 0xe018

0000e028 <__do_clear_bss>:
    e028:	3f 40 08 00 	mov	#8,	r15	;#0x0008
    e02c:	0f 93       	tst	r15		
    e02e:	07 24       	jz	$+16     	;abs 0xe03e
    e030:	92 42 08 12 	mov	&0x1208,&0x0120	
    e034:	20 01 
    e036:	1f 83       	dec	r15		
    e038:	cf 43 00 12 	mov.b	#0,	4608(r15);r3 As==00, 0x1200(r15)
    e03c:	f9 23       	jnz	$-12     	;abs 0xe030

0000e03e <main>:
__attribute__ ((section (".exec.leave"), naked)) void TCB_exit() {
    __asm__ volatile("ret" "\n\t");
}

int main() {
	 TCB();
    e03e:	b0 12 e0 fa 	call	#0xfae0	
     main_loop();
    e042:	b0 12 50 e0 	call	#0xe050	

0000e046 <__stop_progExec__>:
    e046:	32 d0 f0 00 	bis	#240,	r2	;#0x00f0
    e04a:	fd 3f       	jmp	$-4      	;abs 0xe046

0000e04c <__ctors_end>:
    e04c:	30 40 a6 e1 	br	#0xe1a6	

0000e050 <main_loop>:
  //XXX: Application main loop: non-tcb tasks.

  //Binary counter example
  //count is incremented by guaranteed TCB executions
  while (1) {	// loops forever
	if (count % 100 == 0) {
    e050:	1c 42 00 12 	mov	&0x1200,r12	
    e054:	1d 42 02 12 	mov	&0x1202,r13	
    e058:	1e 42 04 12 	mov	&0x1204,r14	
    e05c:	1f 42 06 12 	mov	&0x1206,r15	
    e060:	03 12       	push	#0		;r3 As==00
    e062:	03 12       	push	#0		;r3 As==00
    e064:	03 12       	push	#0		;r3 As==00
    e066:	30 12 64 00 	push	#100		;#0x0064
    e06a:	b0 12 3a e1 	call	#0xe13a	
    e06e:	31 52       	add	#8,	r1	;r2 As==11
    e070:	0c 93       	tst	r12		
    e072:	ee 23       	jnz	$-34     	;abs 0xe050
    e074:	0d 93       	tst	r13		
    e076:	ec 23       	jnz	$-38     	;abs 0xe050
    e078:	0e 93       	tst	r14		
    e07a:	ea 23       	jnz	$-42     	;abs 0xe050
    e07c:	0f 93       	tst	r15		
    e07e:	e8 23       	jnz	$-46     	;abs 0xe050
		P3OUT++;
    e080:	3f 40 19 00 	mov	#25,	r15	;#0x0019
    e084:	6e 4f       	mov.b	@r15,	r14	
    e086:	5e 53       	inc.b	r14		
    e088:	cf 4e 00 00 	mov.b	r14,	0(r15)	;0x0000(r15)
		count++;
    e08c:	1c 42 00 12 	mov	&0x1200,r12	
    e090:	1d 42 02 12 	mov	&0x1202,r13	
    e094:	1e 42 04 12 	mov	&0x1204,r14	
    e098:	1f 42 06 12 	mov	&0x1206,r15	
    e09c:	1c 53       	inc	r12		
    e09e:	0d 63       	adc	r13		
    e0a0:	0e 63       	adc	r14		
    e0a2:	0f 63       	adc	r15		
    e0a4:	82 4c 00 12 	mov	r12,	&0x1200	
    e0a8:	82 4d 02 12 	mov	r13,	&0x1202	
    e0ac:	82 4e 04 12 	mov	r14,	&0x1204	
    e0b0:	82 4f 06 12 	mov	r15,	&0x1206	
    e0b4:	cd 3f       	jmp	$-100    	;abs 0xe050

0000e0b6 <__xabi_udivmod64>:
    e0b6:	07 12       	push	r7		
    e0b8:	06 12       	push	r6		
    e0ba:	05 12       	push	r5		
    e0bc:	04 12       	push	r4		
    e0be:	30 12 40 00 	push	#64		;#0x0040
    e0c2:	04 48       	mov	r8,	r4	
    e0c4:	05 49       	mov	r9,	r5	
    e0c6:	06 4a       	mov	r10,	r6	
    e0c8:	07 4b       	mov	r11,	r7	
    e0ca:	08 43       	clr	r8		
    e0cc:	09 43       	clr	r9		
    e0ce:	0a 43       	clr	r10		
    e0d0:	0b 43       	clr	r11		
    e0d2:	0c 5c       	rla	r12		
    e0d4:	0d 6d       	rlc	r13		
    e0d6:	0e 6e       	rlc	r14		
    e0d8:	0f 6f       	rlc	r15		
    e0da:	08 68       	rlc	r8		
    e0dc:	09 69       	rlc	r9		
    e0de:	0a 6a       	rlc	r10		
    e0e0:	0b 6b       	rlc	r11		
    e0e2:	0b 97       	cmp	r7,	r11	
    e0e4:	0e 28       	jnc	$+30     	;abs 0xe102
    e0e6:	08 20       	jnz	$+18     	;abs 0xe0f8
    e0e8:	0a 96       	cmp	r6,	r10	
    e0ea:	0b 28       	jnc	$+24     	;abs 0xe102
    e0ec:	05 20       	jnz	$+12     	;abs 0xe0f8
    e0ee:	09 95       	cmp	r5,	r9	
    e0f0:	08 28       	jnc	$+18     	;abs 0xe102
    e0f2:	02 20       	jnz	$+6      	;abs 0xe0f8
    e0f4:	08 94       	cmp	r4,	r8	
    e0f6:	05 28       	jnc	$+12     	;abs 0xe102
    e0f8:	08 84       	sub	r4,	r8	
    e0fa:	09 75       	subc	r5,	r9	
    e0fc:	0a 76       	subc	r6,	r10	
    e0fe:	0b 77       	subc	r7,	r11	
    e100:	1c d3       	bis	#1,	r12	;r3 As==01
    e102:	91 83 00 00 	dec	0(r1)		;0x0000(r1)
    e106:	e5 23       	jnz	$-52     	;abs 0xe0d2
    e108:	21 53       	incd	r1		
    e10a:	34 41       	pop	r4		
    e10c:	35 41       	pop	r5		
    e10e:	36 41       	pop	r6		
    e110:	37 41       	pop	r7		
    e112:	30 41       	ret			

0000e114 <__udivdi3>:
    e114:	0b 12       	push	r11		
    e116:	0a 12       	push	r10		
    e118:	09 12       	push	r9		
    e11a:	08 12       	push	r8		
    e11c:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    e120:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    e124:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    e128:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    e12c:	b0 12 b6 e0 	call	#0xe0b6	
    e130:	38 41       	pop	r8		
    e132:	39 41       	pop	r9		
    e134:	3a 41       	pop	r10		
    e136:	3b 41       	pop	r11		
    e138:	30 41       	ret			

0000e13a <__umoddi3>:
    e13a:	0b 12       	push	r11		
    e13c:	0a 12       	push	r10		
    e13e:	09 12       	push	r9		
    e140:	08 12       	push	r8		
    e142:	18 41 0a 00 	mov	10(r1),	r8	;0x000a(r1)
    e146:	19 41 0c 00 	mov	12(r1),	r9	;0x000c(r1)
    e14a:	1a 41 0e 00 	mov	14(r1),	r10	;0x000e(r1)
    e14e:	1b 41 10 00 	mov	16(r1),	r11	;0x0010(r1)
    e152:	b0 12 b6 e0 	call	#0xe0b6	
    e156:	0c 48       	mov	r8,	r12	
    e158:	0d 49       	mov	r9,	r13	
    e15a:	0e 4a       	mov	r10,	r14	
    e15c:	0f 4b       	mov	r11,	r15	
    e15e:	38 41       	pop	r8		
    e160:	39 41       	pop	r9		
    e162:	3a 41       	pop	r10		
    e164:	3b 41       	pop	r11		
    e166:	30 41       	ret			

0000e168 <__udivmoddi4>:
    e168:	0b 12       	push	r11		
    e16a:	0a 12       	push	r10		
    e16c:	09 12       	push	r9		
    e16e:	08 12       	push	r8		
    e170:	07 12       	push	r7		
    e172:	18 41 0c 00 	mov	12(r1),	r8	;0x000c(r1)
    e176:	19 41 0e 00 	mov	14(r1),	r9	;0x000e(r1)
    e17a:	1a 41 10 00 	mov	16(r1),	r10	;0x0010(r1)
    e17e:	1b 41 12 00 	mov	18(r1),	r11	;0x0012(r1)
    e182:	b0 12 b6 e0 	call	#0xe0b6	
    e186:	17 41 14 00 	mov	20(r1),	r7	;0x0014(r1)
    e18a:	87 48 00 00 	mov	r8,	0(r7)	;0x0000(r7)
    e18e:	87 49 02 00 	mov	r9,	2(r7)	;0x0002(r7)
    e192:	87 4a 04 00 	mov	r10,	4(r7)	;0x0004(r7)
    e196:	87 4b 06 00 	mov	r11,	6(r7)	;0x0006(r7)
    e19a:	37 41       	pop	r7		
    e19c:	38 41       	pop	r8		
    e19e:	39 41       	pop	r9		
    e1a0:	3a 41       	pop	r10		
    e1a2:	3b 41       	pop	r11		
    e1a4:	30 41       	ret			

0000e1a6 <_unexpected_>:
    e1a6:	00 13       	reti			

Disassembly of section .tcb:

0000fae0 <TCB>:
  P3OUT = 0x00;
  count = 0;
}

// TCB ISR
__attribute__ ((section (".exec.call"))) ISR(TIMERA0, TCB) {
    fae0:	0f 12       	push	r15		
    fae2:	0e 12       	push	r14		
    fae4:	0d 12       	push	r13		
    fae6:	0c 12       	push	r12		
    fae8:	0b 12       	push	r11		
  //Uses GIE to distinguish between first TCB run after boot and regular interrupts.
  uint16_t* var = 0x0300;
  __asm__ volatile("push    r10" "\n\t");
    faea:	0a 12       	push	r10		
  __asm__ volatile("mov    #0x0300,		r10" "\n\t");
    faec:	3a 40 00 03 	mov	#768,	r10	;#0x0300
  __asm__ volatile("mov    r2,   @(r10)" "\n\t");
    faf0:	8a 42 00 00 	mov	r2,	0(r10)	;0x0000(r10)
  __asm__ volatile("pop    r10" "\n\t");
    faf4:	3a 41       	pop	r10		
  uint16_t first_run = !CHECK_BIT((*var),3);
    faf6:	1f 42 00 03 	mov	&0x0300,r15	
    fafa:	3f f2       	and	#8,	r15	;r2 As==11
    fafc:	1b 43       	mov	#1,	r11	;r3 As==01
    fafe:	01 24       	jz	$+4      	;abs 0xfb02
    fb00:	0b 43       	clr	r11		

  dint();
    fb02:	32 c2       	dint			
    fb04:	03 43       	nop			

  //setup after boot
  if (first_run) {
    fb06:	0b 93       	tst	r11		
    fb08:	0c 24       	jz	$+26     	;abs 0xfb22
  	setup();
    fb0a:	b0 12 70 fb 	call	#0xfb70	
  }

  //call tcb implementation
  tcb_behavior(first_run);
    fb0e:	0f 4b       	mov	r11,	r15	
    fb10:	b0 12 46 fb 	call	#0xfb46	

  eint();
    fb14:	32 d2       	eint			
		__asm__ volatile( "pop		r14" "\n\t");
		__asm__ volatile( "pop		r15" "\n\t");

		__asm__ volatile( "pop      r2" "\n\t");
    } else {
		__asm__ volatile( "pop		r11" "\n\t");
    fb16:	3b 41       	pop	r11		
		__asm__ volatile( "pop		r12" "\n\t");
    fb18:	3c 41       	pop	r12		
		__asm__ volatile( "pop		r13" "\n\t");
    fb1a:	3d 41       	pop	r13		
		__asm__ volatile( "pop		r14" "\n\t");
    fb1c:	3e 41       	pop	r14		
		__asm__ volatile( "pop		r15" "\n\t");
    fb1e:	3f 41       	pop	r15		
    fb20:	0a 3c       	jmp	$+22     	;abs 0xfb36
  if (first_run) {
  	setup();
  }

  //call tcb implementation
  tcb_behavior(first_run);
    fb22:	0f 43       	clr	r15		
    fb24:	b0 12 46 fb 	call	#0xfb46	

  eint();
    fb28:	32 d2       	eint			
  // Postamble enables calling an ISR directly and transparently.
  // needed because ISR uses "reti" while normal functions use "ret"
  // reti pops the status register (r2) before poping PC (r0)
  // ret only pops (r0)
    if(!first_run) {
		__asm__ volatile( "pop		r11" "\n\t");
    fb2a:	3b 41       	pop	r11		
		__asm__ volatile( "pop		r12" "\n\t");
    fb2c:	3c 41       	pop	r12		
		__asm__ volatile( "pop		r13" "\n\t");
    fb2e:	3d 41       	pop	r13		
		__asm__ volatile( "pop		r14" "\n\t");
    fb30:	3e 41       	pop	r14		
		__asm__ volatile( "pop		r15" "\n\t");
    fb32:	3f 41       	pop	r15		

		__asm__ volatile( "pop      r2" "\n\t");
    fb34:	32 41       	pop	r2		
		__asm__ volatile( "pop		r13" "\n\t");
		__asm__ volatile( "pop		r14" "\n\t");
		__asm__ volatile( "pop		r15" "\n\t");
	}

    __asm__ volatile( "br      #__exec_leave" "\n\t");
    fb36:	30 40 da fe 	br	#0xfeda	
}
    fb3a:	3b 41       	pop	r11		
    fb3c:	3c 41       	pop	r12		
    fb3e:	3d 41       	pop	r13		
    fb40:	3e 41       	pop	r14		
    fb42:	3f 41       	pop	r15		
    fb44:	00 13       	reti			

0000fb46 <tcb_behavior>:
// such as cleaning secret leftovers from the stack before untrusted apps can run.
__attribute__ ((section (".exec.lib"))) void tcb_behavior (uint16_t first_run) {

	//XXX: user implementation goes here

	count++;
    fb46:	1c 42 00 12 	mov	&0x1200,r12	
    fb4a:	1d 42 02 12 	mov	&0x1202,r13	
    fb4e:	1e 42 04 12 	mov	&0x1204,r14	
    fb52:	1f 42 06 12 	mov	&0x1206,r15	
    fb56:	1c 53       	inc	r12		
    fb58:	0d 63       	adc	r13		
    fb5a:	0e 63       	adc	r14		
    fb5c:	0f 63       	adc	r15		
    fb5e:	82 4c 00 12 	mov	r12,	&0x1200	
    fb62:	82 4d 02 12 	mov	r13,	&0x1202	
    fb66:	82 4e 04 12 	mov	r14,	&0x1204	
    fb6a:	82 4f 06 12 	mov	r15,	&0x1206	
}
    fb6e:	30 41       	ret			

0000fb70 <setup>:

volatile uint64_t count=0;

__attribute__ ((section (".exec.lib"))) void setup (void) {
  // Disables WDT
  WDTCTL = WDTPW | WDTHOLD;          // Disable watchdog timer
    fb70:	b2 40 80 5a 	mov	#23168,	&0x0120	;#0x5a80
    fb74:	20 01 

  //Timer interrupt configuration
  CCTL0 = CCIE;                            // CCR0 interrupt enabled
    fb76:	b2 40 10 00 	mov	#16,	&0x0162	;#0x0010
    fb7a:	62 01 
  CCR0  = 100; // for vivado simulation
    fb7c:	b2 40 64 00 	mov	#100,	&0x0172	;#0x0064
    fb80:	72 01 
//  CCR0  = 10000; // FPGA visible (slow) speed
  TACTL = TASSEL_2 + MC_1 + ID_3;                 // SMCLK, contmode
    fb82:	b2 40 d0 02 	mov	#720,	&0x0160	;#0x02d0
    fb86:	60 01 

  P3DIR = 0xFF;
    fb88:	f2 43 1a 00 	mov.b	#-1,	&0x001a	;r3 As==11
  P3OUT = 0x00;
    fb8c:	c2 43 19 00 	mov.b	#0,	&0x0019	;r3 As==00
  count = 0;
    fb90:	82 43 00 12 	mov	#0,	&0x1200	;r3 As==00
    fb94:	82 43 02 12 	mov	#0,	&0x1202	;r3 As==00
    fb98:	82 43 04 12 	mov	#0,	&0x1204	;r3 As==00
    fb9c:	82 43 06 12 	mov	#0,	&0x1206	;r3 As==00
}
    fba0:	30 41       	ret			

0000fba2 <__cur_offset>:
	...

0000feda <TCB_exit>:

    __asm__ volatile( "br      #__exec_leave" "\n\t");
}

__attribute__ ((section (".exec.leave"), naked)) void TCB_exit() {
    __asm__ volatile("ret" "\n\t");
    feda:	30 41       	ret			

Disassembly of section .vectors:

0000ffe0 <__ivtbl_16>:
    ffe0:	4c e0 4c e0 4c e0 4c e0 4c e0 4c e0 4c e0 4c e0     L.L.L.L.L.L.L.L.
    fff0:	4c e0 4c e0 4c e0 4c e0 e0 fa 4c e0 4c e0 00 e0     L.L.L.L...L.L...
